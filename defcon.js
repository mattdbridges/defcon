// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var calculateDefconNumber, defconLevels, fetchBuildData, fiveSeconds, jenkinsUri, oneSecond, twoSeconds, updateDefconLevel, _buildPassingPercentage, _buildStatuses, _passingBuilds;
    oneSecond = 1000;
    twoSeconds = 2 * oneSecond;
    fiveSeconds = 5 * oneSecond;
    defconLevels = 5;
    jenkinsUri = function() {
      var source;
      source = localStorage["defcon-jenkins-endpoint"];
      return "" + source + "/api/json?tree=jobs[name,url,color]&jsonp=?";
    };
    _buildStatuses = function(jobs) {
      var build, job, statuses, _i, _len, _results;
      statuses = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = jobs.length; _i < _len; _i++) {
          job = jobs[_i];
          _results.push(job.color);
        }
        return _results;
      })();
      _results = [];
      for (_i = 0, _len = statuses.length; _i < _len; _i++) {
        build = statuses[_i];
        if (build !== "notbuilt" && build !== "disabled") {
          _results.push(build);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    _passingBuilds = function(builds) {
      var color, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = builds.length; _i < _len; _i++) {
        color = builds[_i];
        if (color === "blue" || color === "yellow") {
          _results.push(color);
        }
      }
      return _results;
    };
    _buildPassingPercentage = function(passing, builds) {
      return passing.length / builds.length;
    };
    calculateDefconNumber = function(builds) {
      var built, defconNumber, jobs, passing, percentage;
      jobs = builds.jobs;
      built = _buildStatuses(jobs);
      passing = _passingBuilds(built);
      percentage = _buildPassingPercentage(passing, built);
      defconNumber = Math.ceil(percentage * defconLevels);
      if (defconNumber > 5) {
        defconNumber = 5;
      }
      if (defconNumber < 1) {
        defconNumber = 1;
      }
      return defconNumber;
    };
    fetchBuildData = function(func) {
      return $.getJSON(jenkinsUri()).fail(function() {
        return console.log("Sorry, could not fetch data");
      }).done(function(data) {
        return updateDefconLevel(data);
      });
    };
    updateDefconLevel = function(data) {
      var currentDefconLevel;
      currentDefconLevel = calculateDefconNumber(data);
      $(".levels .active").removeClass("active");
      return $(".defcon-" + currentDefconLevel).addClass("active");
    };
    fetchBuildData();
    setInterval((function() {
      return fetchBuildData();
    }), twoSeconds);
    ($(".source-value")).val(localStorage["defcon-jenkins-endpoint"]);
    return ($(".source-value")).on("keyup blur", function(e) {
      return localStorage["defcon-jenkins-endpoint"] = $(this).val();
    });
  });

}).call(this);

/*
//@ sourceMappingURL=defcon.map
*/
